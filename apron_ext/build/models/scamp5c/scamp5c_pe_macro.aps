//
// SCAMP-5 PE Operation Macros 
//
// Assume analog register F and digital register R0 to be volatile
//
//------------------------------------------------------------------------------

// reset pix to min level
!macro_def
    pe.rpix
!macro_begin
    respix
    respix
!macro_end

// reset pix to min level and save its value
!macro_def
    pe.rpix($r1)
!macro_begin
    respix
    respix
    nop
    F = PIX
    $r1 = F
!macro_end

// $r1 will be a half-toned image, $r2 will be a full range image
!macro_def
    pe.rpix($r1,$r2)
!macro_begin
    $r1 = PIX
    F = PIX
    respix
    nop
    $r2 = load($r1 F PIX)
    $r1 = load(F PIX)
!macro_end

//
!macro_def
    pe.cpix($r1,$r2,$r3)
!macro_begin
    $r1 = PIX
    F = PIX
    $r2 = load($r1 F $r3)
    $r1 = F
!macro_end

//
!macro_def
    $r1 = pe.copy($r2)
!macro_begin
    F = $r2
    $r1 = F
!macro_end

//
!macro_def
    $r1 = pe.add($r2,$r3)
!macro_begin
    F = load($r2 $r3)
    $r1 = F
!macro_end

//
!macro_def
    pe.add($r1,$r2)
!macro_begin
    F = load($r1 $r2)
    $r1 = F
!macro_end

//
!macro_def
    $r1 = pe.sub($r2,$r3)
!macro_begin
    F = $r2
    $r1 = load(F $r3)
!macro_end

//
!macro_def
    pe.sub($r2,$r3)
!macro_begin
    F = $r2
    $r2 = load(F $r3)
!macro_end

//
!macro_def
    $r1 = pe.neg($r2)
!macro_begin
    res(F)
    $r1 = load($r2 F)
!macro_end

//
!macro_def
    $r1 = pe.abs($r2)
!macro_begin
    $r1 = $r2
    F = $r2
    where($r2)
        $r1 = F
    all
!macro_end

//
!macro_def
    pe.div($r1,$r2,$r3)
!macro_begin
    $r2 $r3 = $r1
    F = load($r1 $r3)
    $r3 = load(F $r2)
    $r2 F = $r3
    $r2 = F
    $r3 = F
    // under testing
!macro_end

//A destructive division macro. $r3 = $r3/2 under testing
!macro_def
    pe.d_div($r1,$r2,$r3) 
!macro_begin
    $r2 $r3 = $r1
    F = load($r1 $r3)
    $r1 = load(F $r2)
    $r2 $r3 = $r1
    $r1 = $r3
!macro_end

//
!macro_def
    $r1 = pe.in($v)
!macro_begin
    _mov(su,$v)
    _exp(128, IPU_PORT_B)// I resend this every time since oughta keep transitions the same. 
     set('sin') //drags the bus to the IN level.
    _add(su,128)
    F = IN
    _exp(su, IPU_PORT_B)
    $r1 = F IN
!macro_end


!macro_def
    $r1 = pe.north($r2)
!macro_begin
    //R0 = FLAG
    //all
    NEWS = $r2
    //where(R0)
    $r1 = NORTH
!macro_end


!macro_def
    $r1 = pe.east($r2)
!macro_begin
    NEWS = $r2
    $r1 = EAST
!macro_end


!macro_def
    $r1 = pe.west($r2)
!macro_begin
    NEWS = $r2
    $r1 = WEST
!macro_end


!macro_def
    $r1 = pe.south($r2)
!macro_begin
    NEWS = $r2
    $r1 = SOUTH
!macro_end


!macro_def
    $r1 = pe.d2a($r2)
!macro_begin
    all
    set('plrb' 'rid') //this drives the bus to zero volts
    _exp(0,IPU_PORT_B)
    $r1 = IN
    where($r2)
        set('plrb' 'rid') //this drives the bus to zero volts
        _exp(255, IPU_PORT_B)
        $r1 = IN
    all
!macro_end



// Digital Operation Macros (R0 is volatile)
//------------------------------------------------------------------------------

//
!macro_def
    $r1 = pe.not($r2)
!macro_begin
    $r1 = not($r2)
!macro_end

//
!macro_def
    $r1 = pe.or($r2,$r3)
!macro_begin
    $r1 = load($r2,$r3)
!macro_end

//
!macro_def
    $r1 = pe.nor($r2,$r3)
!macro_begin
//  set(xPLRB xNBIT xL$r1 xR$r2 xR$r3) 
    R0 = load($r2,$r3)
    $r1 = not(R0)
!macro_end

//
!macro_def
    $r1 = pe.and($r2,$r3)
!macro_begin
    $r1 = not($r2)
    $r2 = not($r3)
    R0 = load($r1,$r2)
    $r2 = not($r1)
    $r1 = not(R0)
!macro_end

//
!macro_def
    $r1 = pe.nand($r2,$r3)
!macro_begin
    R0 = not($r2) //invert both inputs
    $r2 = not($r3) 
    set(xPLRB xBIT xBITMODE xL$r1 xRFL xR$r2) 
    $r2 = not(R0) //re-instating R$r2
!macro_end

// clear first DREG if second DREG is 1
!macro_def
    pe.clr_if($r1,$r2)
!macro_begin
    R0 = $r1
    $r1 = not(R0)
    R0 = or($r1,$r2)
    $r1 = not(R0)
!macro_end

//
!macro_def
    pe.refresh($r1)
!macro_begin
    R0 = $r1
    $r1 = R0
!macro_end

// check if first DREG is 0 and second DREG is 1
!macro_def
    $out = pe.pattern_0_1($r1,$r2)
!macro_begin
    $out = not($r2)
    R0 = or($r1,$out)
    $out = not(R0)
!macro_end

// 
!macro_def
    $r1 = pe.a2d($r2)
!macro_begin
    where($r2)
    $r1 = load(FLAG)
    all
!macro_end



// Alternative Name
//------------------------------------------------------------------------------

//
!macro_def
    rpix($r1,$r2)
!macro_begin
    pe.rpix($r1,$r2)
!macro_end

//
!macro_def
    rpix($r1)
!macro_begin
    pe.rpix($r1)
!macro_end

//
!macro_def
    rpix
!macro_begin
    pe.rpix
!macro_end

//
!macro_def
    cpix($r1,$r2,$r3)
!macro_begin
    pe.cpix($r1,$r2,$r3)
!macro_end

//
!macro_def
    $a = in($p)
!macro_begin
    $a = pe.in($p)
!macro_end

//
!macro_def
    $r1 = copy($r2)
!macro_begin
    $r1 = pe.copy($r2)
!macro_end

//
!macro_def
    $r1 = add($r2,$r3)
!macro_begin
    $r1 = pe.add($r2,$r3)
!macro_end

//
!macro_def
    add($r2,$r3)
!macro_begin
    pe.add($r2,$r3)
!macro_end

//
!macro_def
    $r1 = sub($r2,$r3)
!macro_begin
    $r1 = pe.sub($r2,$r3)
!macro_end

//
!macro_def
    sub($r2,$r3)
!macro_begin
    pe.sub($r2,$r3)
!macro_end

//
!macro_def
    div($r1,$r2,$r3)
!macro_begin
    pe.div($r1,$r2,$r3)
!macro_end

//
!macro_def
    $r1 = neg($r2)
!macro_begin
    $r1 = pe.neg($r2)
!macro_end

//
!macro_def
    $r1 = abs($r2)
!macro_begin
    $r1 = pe.abs($r2)
!macro_end

//
!macro_def
    $r1 = north($r2)
!macro_begin
    $r1 = pe.north($r2)
!macro_end

//
!macro_def
    $r1 = east($r2)
!macro_begin
    $r1 = pe.east($r2)
!macro_end

//
!macro_def
    $r1 = west($r2)
!macro_begin
    $r1 = pe.west($r2)
!macro_end

//
!macro_def
    $r1 = south($r2)
!macro_begin
    $r1 = pe.south($r2)
!macro_end

//
!macro_def
    $r1 = or($r2,$r3)
!macro_begin
    $r1 = pe.or($r2,$r3)
!macro_end

//
!macro_def
    $r1 = nor($r2,$r3)
!macro_begin
    $r1 = pe.nor($r2,$r3)
!macro_end

//
!macro_def
    $r1 = and($r2,$r3)
!macro_begin
    $r1 = pe.and($r2,$r3)
!macro_end

//
!macro_def
    $r1 = nand($r2,$r3)
!macro_begin
    $r1 = pe.nand($r2,$r3)
!macro_end



// Deprecated Name
//------------------------------------------------------------------------------

//
!macro_def
    F.rpix
!macro_begin
    pe.rpix
!macro_end

//
!macro_def
    F.rpix($r1,$r2)
!macro_begin
    pe.rpix($r1,$r2)
!macro_end

//
!macro_def
    $a = F.in($p)
!macro_begin
    $a = pe.in($p)
!macro_end

//
!macro_def
    $r1 = F.mov($r2)
!macro_begin
    $r1 = pe.copy($r2)
!macro_end

//
!macro_def
    $r1 = F.add($r2,$r3)
!macro_begin
    $r1 = pe.add($r2,$r3)
!macro_end

//
!macro_def
    F.add($r2,$r3)
!macro_begin
    pe.add($r2,$r3)
!macro_end

//
!macro_def
    $r1 = F.sub($r2,$r3)
!macro_begin
    $r1 = pe.sub($r2,$r3)
!macro_end

//
!macro_def
    F.sub($r2,$r3)
!macro_begin
    pe.sub($r2,$r3)
!macro_end

//
!macro_def
    F.div($r1,$r2,$r3)
!macro_begin
    pe.div($r1,$r2,$r3)
!macro_end

//
!macro_def
    $r1 = F.abs($r2)
!macro_begin
    $r1 = pe.abs($r2)
!macro_end

//
!macro_def
    $r1 = F.neg($r2)
!macro_begin
    $r1 = pe.neg($r2)
!macro_end

//
!macro_def
    $r1 = F.north($r2)
!macro_begin
    $r1 = pe.north($r2)
!macro_end

//
!macro_def
    $r1 = F.east($r2)
!macro_begin
    $r1 = pe.east($r2)
!macro_end

//
!macro_def
    $r1 = F.west($r2)
!macro_begin
    $r1 = pe.west($r2)
!macro_end

//
!macro_def
    $r1 = F.south($r2)
!macro_begin
    $r1 = pe.south($r2)
!macro_end

//
!macro_def
    $r1 = F.d2a($r2)
!macro_begin
    $r1 = pe.d2a($r2)
!macro_end

//
!macro_def
    $r1 = L.not($r2)
!macro_begin
    $r1 = pe.not($r2)
!macro_end

//
!macro_def
    $r1 = L.or($r2,$r3)
!macro_begin
    $r1 = pe.or($r2,$r3)
!macro_end

//
!macro_def
    $r1 = L.nor($r2,$r3)
!macro_begin
    $r1 = pe.nor($r2,$r3)
!macro_end

//
!macro_def
    $r1 = L.and($r2,$r3)
!macro_begin
    $r1 = pe.and($r2,$r3)
!macro_end

//
!macro_def
    $r1 = L.nand($r2,$r3)
!macro_begin
    $r1 = pe.nand($r2,$r3)
!macro_end

//
!macro_def
    $r1 = L.a2d($r2)
!macro_begin
    $r1 = pe.a2d($r2)
!macro_end
