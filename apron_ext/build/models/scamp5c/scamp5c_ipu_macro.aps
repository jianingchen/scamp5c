//
// IPU Macros
// 
// Aliased IPU registers:
// su -- s15
// sv -- s14
// 
// These macros assume su and sv to be volatile registers.
// 
//------------------------------------------------------------------------------



!macro_def
    ipu.reset_loop_counter
!macro_begin
    _exp(0,IPU_PORT_LOOPC_0)
    _exp(0,IPU_PORT_LOOPC_1)
    _exp(0,IPU_PORT_LOOPC_2)
    _exp(0,IPU_PORT_LOOPC_3)
!macro_end


!macro_def
    ipu.inc_loop_counter
!macro_begin
    _exp(255, IPU_PORT_CLK_SWITCH)
    _nop
    
    _imp(sw,IPU_PORT_LOOPC_0)
    _imp(sx,IPU_PORT_LOOPC_1)
    _imp(sy,IPU_PORT_LOOPC_2)
    _imp(sz,IPU_PORT_LOOPC_3)
    _add(sw,1)
    _addc(sx,0)
    _addc(sy,0)
    _addc(sz,0)
    _exp(sw,IPU_PORT_LOOPC_0)
    _exp(sx,IPU_PORT_LOOPC_1)
    _exp(sy,IPU_PORT_LOOPC_2)
    _exp(sz,IPU_PORT_LOOPC_3)
    
    _exp(8, IPU_PORT_CLK_SWITCH)
    _nop
!macro_end


!macro_def
    ipu.sat_addu($p1,$p2)
!macro_begin
    _add($p1,$p2)
    _jump(nc,:#end)
    _mov($p1,255)
    :#end
    _clrc
!macro_end



!macro_def
    ipu.sat_adds($p1,$p2)
!macro_begin
    
!macro_end



!macro_def
    ipu.set_clock_boost
!macro_begin
    _exp(255, IPU_PORT_CLK_SWITCH)
    _exp(1, IPU_PORT_RD)
!macro_end



!macro_def
    ipu.set_clock_normal
!macro_begin
    _exp(8, IPU_PORT_CLK_SWITCH)
    _exp(0, IPU_PORT_RD)
!macro_end



!macro_def
    ipu.apply_clock_dreg
!macro_begin
    _exp(4, IPU_PORT_CLK_SWITCH)
    _nop
!macro_end



!macro_def
    ipu.wait_frame_trigger
!macro_begin
    _nop
    _nop
    
    keep
    set('SEL7')
    
    ipu.set_clock_boost
    
    // wait for rising edge
    :#frame_trig1
    _nop
    _imp(su,IPU_PORT_FT_IN)
    _cmp(su,1)
    _jump(nz,:#frame_trig1)
    _nop
    
    // wait for falling edge
    :#frame_trig2
    _imp(su,IPU_PORT_FT_IN)
    _cmp(su,1)
    _jump(z,:#frame_trig2)
    _nop
    
    ipu.set_clock_normal
    _nop
    _nop
    
!macro_end



!macro_def
    ipu.send_byte($p1)
!macro_begin
    :#wait_usb_buffer
    // Check buffer has space
    _imp(su, IPU_PORT_NO_USB_FLAGS)
    _and(su, 1)
    _jump(nz,:#wait_usb_buffer)
    // Write byte
    _exp($p1,IPU_PORT_NO_IPU_DO)
!macro_end



!macro_def
    ipu.pixel_set($r1,$r2,$r3)
!macro_begin
    _mov(sx,$r2)
    _mov(sy,$r3)
    _call(#_ipu_sa_pixel_set)
    _nop
    R1 = R0
    $r1 = load(R0,R1)
!macro_end



!macro_def
    $r1 = ipu.pixel_select($r2,$r3,$r4,$r5)
!macro_begin
    _mov(sy,$r3)
    _mov(sx,$r2)
    _mov(su,$r4)
    _mov(sv,$r5)
    _call(#_ipu_sa_pixel_select)
    _nop
    $r1 = load(R0)
!macro_end



!macro_def
    ipu.pixel_filter($r1,$r2,$r3,$r4,$r5)
!macro_begin
    _mov(sy,$r3)
    _mov(sx,$r2)
    _mov(su,$r4)
    _mov(sv,$r5)
    _call(#_ipu_sa_pixel_select)
    _nop
    R1 = $r1
    R2 = R0
    $r1 = and(R1,R2)
!macro_end



!macro_def
    $r1 = ipu.global_sum($r2,$r3)
!macro_begin
    _exp(2, IPU_PORT_CLK_SWITCH) 
    _exp(1, IPU_PORT_ADC_DELAY)
    
    _exp(0, IPU_PORT_ADDR)
    _exp(1, IPU_PORT_LR)
    _exp(0, IPU_PORT_LR)
    _exp(1, IPU_PORT_LC)
    _exp(0, IPU_PORT_LC)
    _exp(255, IPU_PORT_ADDR)
    _exp(1, IPU_PORT_LCX)
    _exp(0, IPU_PORT_LCX)
    _exp(1, IPU_PORT_LRX)
    _exp(0, IPU_PORT_LRX)
    _exp($r3,248)// gain
    all
    keep
    set_sel_ana($r2)
    _exp(8, IPU_PORT_CLK_SWITCH)
    _exp(1, IPU_PORT_RD)// clocks
    _nop
    _call(#_ipu_sw_sample_ana)
    _nop
    _exp(8, IPU_PORT_CLK_SWITCH)
    _exp(0, IPU_PORT_RD)
    _nop
    _mov($r1,sw)
!macro_end


//------------------------------------------------------------------------------


!macro_def
    ipu.config_clocks
!macro_begin
    _imp(su,3)
    _exp(su,IPU_PORT_RISE_C1)
    _imp(su,4)
    _exp(su,IPU_PORT_FALL_C1)
    _imp(su,5)
    _exp(su,IPU_PORT_RISE_C2)
    _imp(su,6)
    _exp(su,IPU_PORT_FALL_C2)
    _imp(su,7)
    _exp(su,IPU_PORT_RISE_C3)
    _imp(su,8)
    _exp(su,IPU_PORT_FALL_C3)
    _imp(su,9)
    _exp(su,IPU_PORT_RISE_C4)
    _imp(su,10)
    _exp(su,IPU_PORT_FALL_C4)

    _imp(su,11)
    _exp(su,IPU_PORT_FRAME_CNT_B0)
    _imp(su,12)
    _exp(su,IPU_PORT_FRAME_CNT_B1)
    _imp(su,13)
    _exp(su,IPU_PORT_FRAME_CNT_B2)
!macro_end

