

//------------------------------------------------------------------------------


apron.config_begin
    host.set_frame_rate(300)
    slider_0 = host.add_slider('FT L', 0, 255, 5, SPI_APP_TEXT_T, 0)
    slider_1 = host.add_slider('FT H', 5, 135, 13, SPI_APP_TEXT_H, 0)
    window_1 = host.add_display('Demodulated','Centre')
apron.config_end


//------------------------------------------------------------------------------


ipu.reset_loop_counter

spi.reset

// spi packet for target is 16 bytes, so a smaller transfer size is better
spi.set_transfer_size(40)

_exp(4,IPU_PORT_FALL_C1)
_exp(5,IPU_PORT_RISE_C2) //make this a count of 2 if running at 180MHz
_exp(9,IPU_PORT_FALL_C2)
_exp(1,IPU_PORT_RISE_C3) //make this a count of 2 if running at 180MHz
_exp(9,IPU_PORT_FALL_C3)

_exp(8, IPU_PORT_CLK_SWITCH) //returns clocks back to normal (9MHz at 90MHz clk)
_exp(0, IPU_PORT_RD) //read off
_exp(9, IPU_PORT_DACS) //Code for Vres
_exp(65, IPU_PORT_B)//Setting a lower Vres than usual
_exp(23, IPU_PORT_DACS)
_exp(0, IPU_PORT_DACS)


//------------------------------------------------------------------------------

#start
    _nop
    
    ipu.wait_frame_trigger
    
    s0 = usb.slider(slider_0)
    s1 = usb.slider(slider_1)
    ipu.set_frame_trigger(s0,s1)
    
    _exp(4,IPU_PORT_FALL_C1)
    _exp(5,IPU_PORT_RISE_C2) //make this a count of 2 if running at 180MHz
    _exp(9,IPU_PORT_FALL_C2)
    _nop
    A = 
    B = 
    C = 
    D = 
    E = 
    R5 = 1
    
    respix
    
    _mov(s7,49) //The Integration time constant 
    _mov(s9,20) //Averages
    
    // I create 5 accumulators (in theory better than 4) in  A B C D and E
    _mov(s8,s9)
    #averagereceive  //over Averages number of repeats
    _nop
    
        respix
        nop
        
        F = PIX
        nop
        _call(#quarter_cycle_wait)
        _nop
        
        NEWS = F PIX ///THis is Proper CDS
        F = A
        A = F NEWS
        
        _cmp(s9,s8)
        _jump(z,#skipfirst)
        _nop
        
        F = E
        E = F NEWS
        
        #skipfirst
        _nop
    
        respix
        nop
        nop
        F = PIX
        _call(#quarter_cycle_wait)
        _nop
        
        NEWS = F PIX
        F = B
        B = F NEWS
        _nop
        _nop
        _nop
        
        respix
        nop
        nop
        F = PIX
        _call(#quarter_cycle_wait)
        _nop
        
        NEWS = F PIX
        F = C
        C = F NEWS
        _nop
        _exp(7 , IPU_PORT_ADC_FEAMP) //Set low gain. A marker for setting upo timing.
        _exp(0 , IPU_PORT_ADC_FEAMP) //Set low gain
            
        respix
        nop
        nop
        F = PIX
        
        _call(#quarter_cycle_wait)
        _nop
        
        NEWS = F PIX
        F = D
        D = F NEWS
        
    _sub(s8,1)
    _jump(nz, #averagereceive)
    _nop
    //Add the final item to E
    
    respix
    nop 
    nop
    F = PIX
    _call(#quarter_cycle_wait)
    _nop
    
    NEWS = F PIX
    F = E
    E = F NEWS  
    
    //Sine
    F NEWS = B E //2 add 5. 
    E = F NEWS D C //subtract 3 and 4
        
    nop //Cosine
    F NEWS = A D //1 add 4
    A = F NEWS C B //subtract 2 and 3
    
    C = E //B  //Adding Sine
    F = E 
    set('SEL7' 'wrf') //where(F) 
    C = F //absolute differences. Gives positive numbers
    all
    
    
    D= A //B//Adding Cosine
    F= A 
    //set('SEL7' 'wrf') 
    where(F)
    D = F //absolute differences. Gives positive numbers
    all  
    
    _mov(s3,s9)
    _add(s3,15) //This takes the number of averages and adapts the threshold slightly to deal with increased noise from greater samples
    
    B = pe.in(s3) //Basically the more averages performed, the threshold is moved upwards. Now fixed at ~20 averages
    //Adding Abs(Sine)+Abs(Cosine)
    A = C D 
    E = C D
    
    _mov(s6,5)
    #diffuse
    _nop
        set('SEL4' 'W4' 'SEL1' 'selx' 'selw' 'sels' 'seln' 'sele')
        C = NEWS
        A = C
    _sub(s6,1)
    _jump(nz,#diffuse)
    _nop
    
    A =
    
    _mov(s6,5)
    #diffuseref
    _nop
        set('SEL4' 'W4' 'SEL1' 'selx' 'selw' 'sels' 'seln' 'sele')
        D = NEWS
        A = D
    _sub(s6,1)
    _jump(nz,#diffuseref)
    _nop
    
    D = C B  //Add the threshold
    F = D E //Diffused demodulated minus demodulated image
    where(F)
    _exp(4,IPU_PORT_CLK_SWITCH)
    _exp(6,IPU_PORT_FALL_C1)
    _exp(7,IPU_PORT_RISE_C2) 
    _exp(8,IPU_PORT_FALL_C2)
    _nop
    R3 = FLAG //THese are the pixels we want. Marked black (0)
    all
    
    //R5 = 0 //Implement if want to test without high intensity suppression
    R7 = R5 R3 //R5 has the intense pixels contained within
    R4 = not(R7)
    
    ipu.inc_loop_counter
    
    // scan target

    // check fifo
    spi.get_fifo_space(s0)
    _sub(s0,SPI_FIFO_SPACE_256)
    _jump(c,#start)
    _nop
    
    // scan the bounding box of any blobs in R5 and send the coordinates through spi
    spi.begin
    spi.scan_target(R4)
    spi.end
    
//     usb.dout(R4,window_1) 
    
_nop
_jump(#start)
_nop


apron.genereate_host
apron.compile_host


    
#quarter_cycle_wait
_nop
    _exp(0, IPU_PORT_B) //Just set the IN value to zero
    _exp(2, IPU_PORT_CLK_SWITCH)  //slow clocks so dont have to count too high
    _exp(1, IPU_PORT_RD)
    _mov(s2,s7) 
    #waitouter
    _nop
    _sub(s2, 1)
    _jump(nz,#waitouter)
    _nop                                           
    _exp(4, IPU_PORT_CLK_SWITCH)                                          
    _exp(0, IPU_PORT_RD)
     NEWS = PIX IN
    _exp(6,IPU_PORT_FALL_C2)
     where(NEWS  ) //test for high intensity
     R6 = FLAG 
     R7 = not(R5) //previous intense pixels
     R4 = R6 R7 //pixels not to work with cos too bright
     R5 = R4
     all
     _exp(9,IPU_PORT_FALL_C2)
     _exp(8, IPU_PORT_CLK_SWITCH) 
 _ret
 _nop
