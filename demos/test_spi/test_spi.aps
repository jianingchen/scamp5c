//
//
// This alogrithm has include three working mode, which can be used to test 
// the spi hosting environment. The second slider can be used to change the 
// working mode from the SPI Host App.
//
//
//------------------------------------------------------------------------------


apron.config_begin
    sim.pix_source_webcam
    host.set_frame_rate(60)
    window_1 = host.add_display('cap')
    slider_0 = host.add_slider('switch', 1, 4, 2, SPI_APP_TEXT_SWITCH, 1)
    slider_1 = host.add_slider('threshold', -120, 120, 32, SPI_APP_TEXT_THRESHOLD_A, 0)
apron.config_end


//------------------------------------------------------------------------------


ipu.reset_loop_counter

spi.reset

spi.set_transfer_size(600)

ipu.delay_50us_x(250)

#start

    ipu.wait_frame_trigger
    rpix
    
    ipu.wait_frame_trigger
    rpix(B,C)
    
    ipu.inc_loop_counter
    
    spi.get_fifo_space(s0)
    _sub(s0,SPI_FIFO_SPACE_640)
    _jump(c,#start)
    _nop
    
    
    // switch
    s0 = spi.port(SPI_RX_0)
    
    _cmp(s0,1)
    _jump(z,#aout)
    _nop
    
    _cmp(s0,2)
    _jump(z,#aout64)
    _nop
    
    _cmp(s0,3)
    _jump(z,#dout)
    _nop
    
    _cmp(s0,4)
    _jump(z,#analog_in)
    _nop
    
    
    // case 1: analog register readout
    #aout
    _nop
    spi.begin
    spi.aout(C)
    spi.end
    _jump(#start)
    _nop
    
    
    // case 2: analog register readout (subsampled)
    #aout64
    _nop
    spi.begin
    spi.aout64(C)
    spi.end
    _jump(#start)
    _nop
    
    
    // case 3: digital register readout
    #dout
    _nop
    s1 = spi.port(SPI_RX_1)
    E = in(s1)
    D = sub(C,E)
    where(D)
    R5 = FLAG
    all
    spi.begin
    spi.dout(R5)
    spi.end
    _jump(#start)
    _nop
    
    
    // case 4: readback analog input
    #analog_in
    _nop
    s1 = spi.port(SPI_RX_1)
    E = in(s1)
    spi.begin
    spi.aout64(E)
    spi.end
    _jump(#start)
    _nop

_jump(#start)
_nop


//------------------------------------------------------------------------------


apron.genereate_host
apron.compile_host
